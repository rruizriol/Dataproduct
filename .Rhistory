sampleMean = 2
sampleSize = 9
error = qt (0.975,sampleSize-1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt (0.975,sampleSize)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleStd /  sqrt (sampleSize)
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize - 1))/ error
sampleStd
sampleStd /  sqrt (sampleSize)
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleStd /  sqrt (sampleSize)
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize- 1))/ error
sampleStd
sampleStd /  sqrt (sampleSize - 1)
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
std = sampleStd /  sqrt (sampleSize)
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
std = sampleStd /  sqrt (sampleSize)
sampleStd
std
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize - 1))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.95,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize - 1))/ error
sampleStd
sampleMean = -2
sampleSize = 9
error = qt(0.95,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize - 1))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.97,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize - 1))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt(0.975,sampleSize - 1)
sampleStd = ((2 ) * sqrt (sampleSize - 1))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt (0.975,sampleSize -1)
sampleStd = ((2 ) * sqrt (sampleSize -1))/ error
sampleStd
sampleMean = 2
sampleSize = 9
error = qt (0.975,sampleSize -1)
sampleStd = ((2 ) * sqrt (sampleSize))/ error
sampleStd
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(n)
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(.95)
mu0 <- mn - z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(.45)
mu0 <- mn - z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(n)
mu0
power.t.test(power=.9, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.04, type="paired", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.004, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.004, type="paired", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.004, type="one.sampled", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.004, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.05, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.95, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.1, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
mn <- 12;
s <- 4;
n <- 100
z <- 0.95
mu0 <- mn - z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- 0.95
mu0 <- (mn - z * s) / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- 0.05
mu0 <- (mn - z * s) / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.05)
mu0 <- (mn - z * s) / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- 0.95
mu0 <- (mn - z * s) / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.95)
mu0 <- (mn - z * s) / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.95)
mu0 <- mn - z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.05)
mu0 <- mn - z * s / sqrt(n)
mu0
pt(0.75, 15, lower.tail = FALSE)
pt(0.006, 15, lower.tail = FALSE)
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.95)
mu0 <- mn - z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.95)
mu0 <- mn + z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.05)
mu0 <- mn + z * s / sqrt(n)
mu0
mn <- 12;
s <- 4;
n <- 100
z <- qnorm(0.05)
mu0 <- mn - z * s / sqrt(n)
mu0
n <- (qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
n
n <- (qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
mn <- 12;
s <- 4;
n <- 100
z <- 0.95
mu0 <- mn + z * s / sqrt(n)
mu0
install.packages("shiny")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
#manipulate(myPlot, s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
#manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
#manipulate(myPlot, s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
#manipulate(myPlot, s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1)) # error
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1)) # slide doens't work
manipulate(myPlot, s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1)) # error
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1)) # slide doens't work
#manipulate(myPlot, s = slider(0, 2, step = 0.1)) # doen't show an slider
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1)) # error
install.packages("rCharts")
install.packages("downloader")
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
#h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
?dTable
??dTable
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
#manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("UsingR")
install.packages("swirl")
install.packages("caret")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~
| parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~
| parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
swirl
swirl90
swirl()
library(swirl)
swril()
swirl()
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic = fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope = fit$coef[2]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(child)
varChild <- var(children$height)
varChild <- var(child$height)
info()
varChild <- var(galton$child$heigth)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equals(varChild, varRes + varEst)
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x * w)/sum(w)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x * w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regline <- lm(y ~ x)
summary(regrline)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regrline <- lm(y ~ x)
summary(regrline)
regrline <- lm(mpg ~ weight, mtcars)
summary(regrline)
data(mtcars)
regrline <- lm(mpg ~ weight, mtcars)
summary(regrline)
data(mtcars)
regrline <- lm(mtcars$mpg ~ mtcars$weight, mtcars)
summary(regrline)
data(mtcars)
regrline <- lm(mtcars$mpg ~ mtcars$wt, mtcars)
summary(regrline)
regrline <- lm(mtcars$mpg ~ mtcars$wt, mtcars)
summary(regrline)
regrline <- lm(mpg ~ wt, mtcars)
summary(regrline)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regrline <- lm(y ~ x)
summary(regrline)
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regrline <- lm(y ~ x)
summary(regrline)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regrline <- lm(I(y - mean(y)) ~ I(x - mean(x)) - 1)
summary(regrline)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regrline <- lm(formula = I(y - mean(y)) ~ I(x - mean(x)) - 1)
summary(regrline)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
regrline <- lm(formula = I(x - mean(x)) ~ I(y - mean(y)) - 1)
summary(regrline)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
w <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(x * w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum( x * y)/sum(x * x)
install.package("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifylibraries','ramnathv')
shinyapps::setAccountInfo(
name="rruizriol",
token="CC3A37FDF0248AE0FE06B259BF3B0E46",
secret="<SECRET>")
library(shiny)
shinyapps::setAccountInfo(
name="rruizriol",
token="CC3A37FDF0248AE0FE06B259BF3B0E46",
secret="<SECRET>")
setAccountInfo(
name="rruizriol",
token="CC3A37FDF0248AE0FE06B259BF3B0E46",
secret="<SECRET>")
shiny::setAccountInfo(
name="rruizriol",
token="CC3A37FDF0248AE0FE06B259BF3B0E46",
secret="<SECRET>")
install.packages("shinyapps")
library(shinyapps)
devtools::install_github('shinyapps', 'rstudio')
shinyapps::setAccountInfo(
name="rruizriol",
token="CC3A37FDF0248AE0FE06B259BF3B0E46",
secret="<SECRET>")
shinyapps::setAccountInfo(name='rruizriol', token='CC3A37FDF0248AE0FE06B259BF3B0E46', secret='+FrYY3mIq97kpPFGFeC85FtgxSuH8HBAHwnphiLh')
deployApp()
shinyapps::deployApp()
library(shiny)
runApp()
setwd("D:/Courses/Data Science Specialization/Developing Data Products/Projects/Dataproduct")
runApp()
